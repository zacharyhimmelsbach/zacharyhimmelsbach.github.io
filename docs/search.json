[
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "In Spring 2024, I will serve as lecturer for a graduate applied statistics course at Harvard.\nIn the past, I have served as a teaching fellow for Harvard courses on\n\nIntermediate and Applied Statistics (EDUS052)\nQuantitative Text Analysis (EDUS059)\nData Science (EDUS043)\nIntroductory Applied Statistics (EDUS040)\n\nIn these roles, I developed and taught material on programming, statistical methods, and natural language processing."
  },
  {
    "objectID": "teaching.html#teaching-experience",
    "href": "teaching.html#teaching-experience",
    "title": "Teaching",
    "section": "",
    "text": "In Spring 2024, I will serve as lecturer for a graduate applied statistics course at Harvard.\nIn the past, I have served as a teaching fellow for Harvard courses on\n\nIntermediate and Applied Statistics (EDUS052)\nQuantitative Text Analysis (EDUS059)\nData Science (EDUS043)\nIntroductory Applied Statistics (EDUS040)\n\nIn these roles, I developed and taught material on programming, statistical methods, and natural language processing."
  },
  {
    "objectID": "teaching.html#teaching-evaluations",
    "href": "teaching.html#teaching-evaluations",
    "title": "Teaching",
    "section": "Teaching Evaluations",
    "text": "Teaching Evaluations\n\nData Science (2023)\nQuantitative Text Analysis (2023)\n\n(I do not have access to evaluations from pre-2023 due to Harvard changing its evaluation system)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Zachary Himmelsbach",
    "section": "",
    "text": "I am a Harvard-trained data scientist and statistician who studies human learning and teaching.\n\nCurrent Work\nI develop methods for using natural language processing techniques and large language models in rigorous statistical analyses. My research has been funded by the Institute for Education Sciences and the Bill and Melinda Gates Foundation. Current projects include\n\nZero-shot learning methods coupled with generalized method of moments estimators to measure pedagogical practices from teachers’ speech data\nHigh-dimensional word embeddings and permutation testing to identify words and phrases whose usage differs by group. I use this method to explore language differences between highly effective and less effective teachers\nA computational method to assess the sensitivity of regression discontinuity results to possible data manipulation\n\n\n\nPublished Works\n\nThe important role that teachers play in students’ development of mathematical language (Under Review)\nA multi-site RCT that identifies an effective intervention for reducing absenteeism in early grades (Peer Reviewed)\nThe role of standardized testing in college admissions (Peer Reviewed)\n\n\n\nBio\nI received my AM in Statistics from Harvard, where I am currently finishing my PhD in education policy. Previously, I worked as a research analyst at Harvard’s Center for Education Policy Research under the mentorship of Doug Staiger and Thomas Kane. In that role, I developed statistical software for Bayesian analyses of rapid cycle randomized control trials. Since then, I have continued to develop statistical software; currently, alongside Reagan Mozer and Luke Miratrix, I am developing RctText, an R package for impact analyses with text data as the outcome. My PhD commitee includes my advisor Sebastian Munoz-Najar, Luke Miratrix, and Andrew Ho.\nI have also interned with J-PAL Global at MIT, worked at Conversica (a tech company), and served in the Peace Corps. My other collaborators include Dora Demzsky, Heather Hill, and Jing Liu.\nIf you are interested in hiring a consultant or contractor for analytic work, email me. I am excited to work with you!"
  },
  {
    "objectID": "regression_web_app.html",
    "href": "regression_web_app.html",
    "title": "Serverless Regression Web App",
    "section": "",
    "text": "I built the webapp below with python and shiny, but all computation is executed locally, on your computer or phone, through the magic of WebAssembly. You can read about WebAssembly here and learn about deploying shiny apps in python via WebAssembly here.\nIf you teach stats/data science, this is a great way to make interactive teaching tools without paying for a server, worrying about free services’ user-limits (e.g. shinyapps), or dealing with DevOps. These can be especially helpful early in a course - before students have learned much programming - or in courses without a coding focus, so you can concentrate on statistical concepts without forcing students to simultaneously deal with coding challenges. The code is available on the github repo for this website.\nThe app fits a simple regression with data entered by the user. The model being estimated is \\[Math\\_Score_i=\\beta_0 + \\beta_1 Age_i + \\varepsilon_i\\] \\[\\varepsilon \\sim N(0, \\sigma^2_\\varepsilon)\\] I use this as part of an in-class activity where students draw their sample of data out of a bag (representing the population). All students enter their data in this app, calculate their t-statistics, and report them via a Google survey. Afterwards, I display the distribution of the students’ test statistics and show that they resemble the theoretical sampling distribution.\n#| standalone: true\n#| viewerHeight: 750\n\nimport pandas as pd\nfrom numpy import sqrt \nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom shiny import App, Inputs, Outputs, Session, reactive, render, req, ui\n\napp_ui = ui.page_fluid(\n    ui.input_numeric('age', 'Input Age', None),\n    ui.input_numeric('math_score', 'Input Math Score', None),\n    ui.input_action_button('add_row', 'Add Row'),\n    ui.input_action_button('remove_row', 'Remove Row'),\n    ui.output_text('t_stat'),\n    ui.output_data_frame(\"grid\"),\n    ui.output_plot(\"scatter\"),\n    ui.panel_fixed(\n        ui.output_text_verbatim(\"detail\"),\n        right=\"10px\",\n        bottom=\"10px\",\n    ),\n    class_=\"p-3\",\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    user_added_data = reactive.Value([])\n\n    @reactive.Effect\n    @reactive.event(input.add_row)\n    def add_row_to_df():\n        values = user_added_data()\n        values.append([input.age(), input.math_score()])\n\n    @reactive.Effect\n    @reactive.event(input.remove_row)\n    def remove_row_from_df():\n        values = user_added_data()\n        if len(values) &gt; 1:\n            del values[-1]\n        elif len(values)==1:\n            del values[0]\n    \n    @output\n    @render.data_frame\n    @reactive.event(input.add_row, input.remove_row, ignore_none=False)\n    def grid():\n        height = 350 \n        width = \"100%\" \n        return render.DataGrid(\n            pd.DataFrame(user_added_data(), columns=['age', 'math_score']),\n            height=height,\n            width=width\n        )\n\n    @output\n    @render.plot(alt='A scatterplot')\n    @reactive.event(input.add_row, input.remove_row, ignore_none=False)\n    def scatter():\n        dat = pd.DataFrame(user_added_data(), columns=['age', 'math_score'])\n        \n        if dat.empty: # Handle making plot before user adds data\n          dat = pd.DataFrame([[0,0]], columns=['age', 'math_score'])\n          alpha_arg = 0\n        else:\n          alpha_arg = 1\n        slope, intercept, r_value, p_value, std_err = stats.linregress(dat['age'], dat['math_score'])\n\n        fig, ax = plt.subplots()\n        ax.scatter(dat['age'], dat['math_score'], label=\"Sample Data\", alpha=alpha_arg)\n        ax.plot(dat['age'], intercept + slope * dat['age'], color='red', label=\"OLS Regression Line\")\n\n        ax.set_xlabel(\"Age\")\n        ax.set_ylabel(\"Math Score\")\n        ax.legend()\n        ax.set_title(\"Regression in Your Sample\")\n        ax.grid(True)\n\n        return(fig)\n    \n    @output\n    @render.text\n    @reactive.event(input.add_row, input.remove_row, ignore_none=False)\n    def t_stat():\n        dat = pd.DataFrame(user_added_data(), columns=['age', 'math_score'])\n        X = dat['age']\n        Y = dat['math_score']\n        \n        n = len(X)\n        if n &lt; 3:\n          return('Not enough data to calcuate t-statistic (3 rows required)')\n\n        # Calculate the means of X and Y\n        mean_X = X.mean()\n        mean_Y = Y.mean()\n        \n        # Calculate the sum of squared differences for X\n        ss_X = ((X - mean_X) ** 2).sum()\n        \n        # Calculate the regression coefficient (slope)\n        beta_1 = ((X - mean_X) * (Y - mean_Y)).sum() / ss_X\n        \n        # Calculate the standard error of the estimate\n        y_predicted = beta_1 * X + (mean_Y - beta_1 * mean_X)\n        residuals = Y - y_predicted\n        mse = (residuals ** 2).sum() / (n - 2)  # n - 2 degrees of freedom\n        std_error = sqrt(mse / ss_X)\n        \n        # Calculate the t-statistic\n        t_statistic = round(beta_1 / std_error, 2)\n        \n        return(f't-stat: {t_statistic}\\nEstimated Slope: {round(beta_1,2)}')\n\napp = App(app_ui, server)"
  }
]